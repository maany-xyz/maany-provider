// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: maany/mintburn/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgEscrowInitial struct {
	Sender          string     `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	ConsumerChainId string     `protobuf:"bytes,2,opt,name=consumer_chain_id,json=consumerChainId,proto3" json:"consumer_chain_id,omitempty"`
	Amount          types.Coin `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount"`
	Recipient       string     `protobuf:"bytes,4,opt,name=recipient,proto3" json:"recipient,omitempty"`
	ExpiryHeight    uint64     `protobuf:"varint,5,opt,name=expiry_height,json=expiryHeight,proto3" json:"expiry_height,omitempty"`
	ExpiryTimeUnix  uint64     `protobuf:"varint,6,opt,name=expiry_time_unix,json=expiryTimeUnix,proto3" json:"expiry_time_unix,omitempty"`
}

func (m *MsgEscrowInitial) Reset()         { *m = MsgEscrowInitial{} }
func (m *MsgEscrowInitial) String() string { return proto.CompactTextString(m) }
func (*MsgEscrowInitial) ProtoMessage()    {}
func (*MsgEscrowInitial) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef7f989b267b4432, []int{0}
}
func (m *MsgEscrowInitial) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgEscrowInitial) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgEscrowInitial.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgEscrowInitial) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgEscrowInitial.Merge(m, src)
}
func (m *MsgEscrowInitial) XXX_Size() int {
	return m.Size()
}
func (m *MsgEscrowInitial) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgEscrowInitial.DiscardUnknown(m)
}

var xxx_messageInfo_MsgEscrowInitial proto.InternalMessageInfo

func (m *MsgEscrowInitial) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgEscrowInitial) GetConsumerChainId() string {
	if m != nil {
		return m.ConsumerChainId
	}
	return ""
}

func (m *MsgEscrowInitial) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

func (m *MsgEscrowInitial) GetRecipient() string {
	if m != nil {
		return m.Recipient
	}
	return ""
}

func (m *MsgEscrowInitial) GetExpiryHeight() uint64 {
	if m != nil {
		return m.ExpiryHeight
	}
	return 0
}

func (m *MsgEscrowInitial) GetExpiryTimeUnix() uint64 {
	if m != nil {
		return m.ExpiryTimeUnix
	}
	return 0
}

type MsgEscrowInitialResponse struct {
}

func (m *MsgEscrowInitialResponse) Reset()         { *m = MsgEscrowInitialResponse{} }
func (m *MsgEscrowInitialResponse) String() string { return proto.CompactTextString(m) }
func (*MsgEscrowInitialResponse) ProtoMessage()    {}
func (*MsgEscrowInitialResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef7f989b267b4432, []int{1}
}
func (m *MsgEscrowInitialResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgEscrowInitialResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgEscrowInitialResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgEscrowInitialResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgEscrowInitialResponse.Merge(m, src)
}
func (m *MsgEscrowInitialResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgEscrowInitialResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgEscrowInitialResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgEscrowInitialResponse proto.InternalMessageInfo

type MsgCancelEscrow struct {
	Sender          string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	ConsumerChainId string `protobuf:"bytes,2,opt,name=consumer_chain_id,json=consumerChainId,proto3" json:"consumer_chain_id,omitempty"`
	Denom           string `protobuf:"bytes,3,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *MsgCancelEscrow) Reset()         { *m = MsgCancelEscrow{} }
func (m *MsgCancelEscrow) String() string { return proto.CompactTextString(m) }
func (*MsgCancelEscrow) ProtoMessage()    {}
func (*MsgCancelEscrow) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef7f989b267b4432, []int{2}
}
func (m *MsgCancelEscrow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelEscrow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelEscrow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelEscrow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelEscrow.Merge(m, src)
}
func (m *MsgCancelEscrow) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelEscrow) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelEscrow.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelEscrow proto.InternalMessageInfo

func (m *MsgCancelEscrow) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgCancelEscrow) GetConsumerChainId() string {
	if m != nil {
		return m.ConsumerChainId
	}
	return ""
}

func (m *MsgCancelEscrow) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type MsgCancelEscrowResponse struct {
}

func (m *MsgCancelEscrowResponse) Reset()         { *m = MsgCancelEscrowResponse{} }
func (m *MsgCancelEscrowResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCancelEscrowResponse) ProtoMessage()    {}
func (*MsgCancelEscrowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef7f989b267b4432, []int{3}
}
func (m *MsgCancelEscrowResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelEscrowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelEscrowResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelEscrowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelEscrowResponse.Merge(m, src)
}
func (m *MsgCancelEscrowResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelEscrowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelEscrowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelEscrowResponse proto.InternalMessageInfo

// MsgMarkEscrowClaimed updates the status of an escrow to CLAIMED by id
type MsgMarkEscrowClaimed struct {
	Sender   string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	EscrowId string `protobuf:"bytes,2,opt,name=escrow_id,json=escrowId,proto3" json:"escrow_id,omitempty"`
}

func (m *MsgMarkEscrowClaimed) Reset()         { *m = MsgMarkEscrowClaimed{} }
func (m *MsgMarkEscrowClaimed) String() string { return proto.CompactTextString(m) }
func (*MsgMarkEscrowClaimed) ProtoMessage()    {}
func (*MsgMarkEscrowClaimed) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef7f989b267b4432, []int{4}
}
func (m *MsgMarkEscrowClaimed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMarkEscrowClaimed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMarkEscrowClaimed.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMarkEscrowClaimed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMarkEscrowClaimed.Merge(m, src)
}
func (m *MsgMarkEscrowClaimed) XXX_Size() int {
	return m.Size()
}
func (m *MsgMarkEscrowClaimed) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMarkEscrowClaimed.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMarkEscrowClaimed proto.InternalMessageInfo

func (m *MsgMarkEscrowClaimed) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgMarkEscrowClaimed) GetEscrowId() string {
	if m != nil {
		return m.EscrowId
	}
	return ""
}

type MsgMarkEscrowClaimedResponse struct {
}

func (m *MsgMarkEscrowClaimedResponse) Reset()         { *m = MsgMarkEscrowClaimedResponse{} }
func (m *MsgMarkEscrowClaimedResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMarkEscrowClaimedResponse) ProtoMessage()    {}
func (*MsgMarkEscrowClaimedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef7f989b267b4432, []int{5}
}
func (m *MsgMarkEscrowClaimedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMarkEscrowClaimedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMarkEscrowClaimedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMarkEscrowClaimedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMarkEscrowClaimedResponse.Merge(m, src)
}
func (m *MsgMarkEscrowClaimedResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMarkEscrowClaimedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMarkEscrowClaimedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMarkEscrowClaimedResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgEscrowInitial)(nil), "maany.mintburn.v1.MsgEscrowInitial")
	proto.RegisterType((*MsgEscrowInitialResponse)(nil), "maany.mintburn.v1.MsgEscrowInitialResponse")
	proto.RegisterType((*MsgCancelEscrow)(nil), "maany.mintburn.v1.MsgCancelEscrow")
	proto.RegisterType((*MsgCancelEscrowResponse)(nil), "maany.mintburn.v1.MsgCancelEscrowResponse")
	proto.RegisterType((*MsgMarkEscrowClaimed)(nil), "maany.mintburn.v1.MsgMarkEscrowClaimed")
	proto.RegisterType((*MsgMarkEscrowClaimedResponse)(nil), "maany.mintburn.v1.MsgMarkEscrowClaimedResponse")
}

func init() { proto.RegisterFile("maany/mintburn/v1/tx.proto", fileDescriptor_ef7f989b267b4432) }

var fileDescriptor_ef7f989b267b4432 = []byte{
	// 543 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xbf, 0x6f, 0x13, 0x31,
	0x18, 0xcd, 0xb5, 0x49, 0x44, 0xdc, 0x96, 0x36, 0xa7, 0x88, 0x5e, 0x8e, 0xea, 0x88, 0xd2, 0x81,
	0x28, 0x88, 0x3b, 0xa5, 0x20, 0x21, 0x31, 0x36, 0x42, 0x22, 0x43, 0x18, 0x22, 0x90, 0x10, 0x03,
	0x91, 0x73, 0x67, 0x5d, 0x2c, 0x62, 0xfb, 0x64, 0x3b, 0xe1, 0xc2, 0x84, 0xd8, 0xd8, 0xf8, 0x53,
	0xfa, 0x17, 0x30, 0x77, 0xec, 0xc8, 0x84, 0x50, 0x32, 0xf4, 0xdf, 0x40, 0xb1, 0x7d, 0x0d, 0xf9,
	0x81, 0xe8, 0xc0, 0x66, 0xbf, 0xf7, 0xbe, 0xef, 0x7d, 0xdf, 0x93, 0xef, 0x80, 0x4b, 0x20, 0xa4,
	0xd3, 0x80, 0x60, 0x2a, 0x07, 0x63, 0x4e, 0x83, 0x49, 0x2b, 0x90, 0xa9, 0x9f, 0x70, 0x26, 0x99,
	0x5d, 0x56, 0x9c, 0x9f, 0x71, 0xfe, 0xa4, 0xe5, 0x7a, 0x21, 0x13, 0x84, 0x89, 0x60, 0x00, 0x05,
	0x0a, 0x26, 0xad, 0x01, 0x92, 0xb0, 0x15, 0x84, 0x0c, 0x53, 0x5d, 0xe2, 0x56, 0x62, 0x16, 0x33,
	0x75, 0x0c, 0x16, 0x27, 0x83, 0x1e, 0x9b, 0x2a, 0x22, 0xe2, 0x85, 0x01, 0x11, 0xb1, 0x21, 0xaa,
	0x9a, 0xe8, 0xeb, 0x0a, 0x7d, 0xd1, 0x54, 0xfd, 0xeb, 0x0e, 0x38, 0xea, 0x8a, 0xf8, 0x85, 0x08,
	0x39, 0xfb, 0xd8, 0xa1, 0x58, 0x62, 0x38, 0xb2, 0xef, 0x81, 0xa2, 0x40, 0x34, 0x42, 0xdc, 0xb1,
	0x6a, 0x56, 0xa3, 0xd4, 0x33, 0x37, 0xbb, 0x09, 0xca, 0x21, 0xa3, 0x62, 0x4c, 0x10, 0xef, 0x87,
	0x43, 0x88, 0x69, 0x1f, 0x47, 0xce, 0x8e, 0x92, 0x1c, 0x66, 0x44, 0x7b, 0x81, 0x77, 0x22, 0xfb,
	0x19, 0x28, 0x42, 0xc2, 0xc6, 0x54, 0x3a, 0xbb, 0x35, 0xab, 0xb1, 0x77, 0x56, 0xf5, 0x8d, 0xef,
	0x62, 0x27, 0xdf, 0xec, 0xe4, 0xb7, 0x19, 0xa6, 0xe7, 0xf9, 0xcb, 0x9f, 0x0f, 0x72, 0x3d, 0x23,
	0xb7, 0x4f, 0x40, 0x89, 0xa3, 0x10, 0x27, 0x18, 0x51, 0xe9, 0xe4, 0x55, 0xf3, 0x25, 0x60, 0x9f,
	0x82, 0x03, 0x94, 0x26, 0x98, 0x4f, 0xfb, 0x43, 0x84, 0xe3, 0xa1, 0x74, 0x0a, 0x35, 0xab, 0x91,
	0xef, 0xed, 0x6b, 0xf0, 0xa5, 0xc2, 0xec, 0x06, 0x38, 0x32, 0x22, 0x89, 0x09, 0xea, 0x8f, 0x29,
	0x4e, 0x9d, 0xa2, 0xd2, 0xdd, 0xd5, 0xf8, 0x6b, 0x4c, 0xd0, 0x1b, 0x8a, 0xd3, 0xe7, 0x7b, 0x5f,
	0xae, 0x2f, 0x9a, 0x66, 0xbd, 0xba, 0x0b, 0x9c, 0xf5, 0x28, 0x7a, 0x48, 0x24, 0x8c, 0x0a, 0x54,
	0x4f, 0xc1, 0x61, 0x57, 0xc4, 0x6d, 0x48, 0x43, 0x34, 0xd2, 0x8a, 0xff, 0x92, 0x52, 0x05, 0x14,
	0x22, 0x44, 0x19, 0x51, 0x21, 0x95, 0x7a, 0xfa, 0xb2, 0x3a, 0x55, 0x15, 0x1c, 0xaf, 0x39, 0xdf,
	0x0c, 0xf5, 0x16, 0x54, 0xba, 0x22, 0xee, 0x42, 0xfe, 0x41, 0x13, 0xed, 0x11, 0xc4, 0x04, 0x45,
	0x7f, 0x9d, 0xec, 0x3e, 0x28, 0x21, 0x25, 0x5c, 0x4e, 0x74, 0x47, 0x03, 0x9d, 0x68, 0xd5, 0xd4,
	0x03, 0x27, 0xdb, 0x3a, 0x67, 0xce, 0x67, 0xdf, 0x77, 0xc0, 0x6e, 0x57, 0xc4, 0x36, 0x04, 0x07,
	0xab, 0x4f, 0xe7, 0xd4, 0xdf, 0x78, 0xcd, 0xfe, 0x7a, 0xa8, 0xee, 0xa3, 0x5b, 0x88, 0x32, 0x2b,
	0xfb, 0x3d, 0xd8, 0x5f, 0x89, 0xbd, 0xbe, 0xbd, 0xf8, 0x4f, 0x8d, 0xdb, 0xfc, 0xb7, 0xe6, 0xa6,
	0x3f, 0x01, 0xe5, 0xcd, 0x04, 0x1f, 0x6e, 0x6f, 0xb0, 0x21, 0x74, 0x83, 0x5b, 0x0a, 0x33, 0x3b,
	0xb7, 0xf0, 0xf9, 0xfa, 0xa2, 0x69, 0x9d, 0xbf, 0xba, 0x9c, 0x79, 0xd6, 0xd5, 0xcc, 0xb3, 0x7e,
	0xcd, 0x3c, 0xeb, 0xdb, 0xdc, 0xcb, 0x5d, 0xcd, 0xbd, 0xdc, 0x8f, 0xb9, 0x97, 0x7b, 0xf7, 0x34,
	0xc6, 0x72, 0x38, 0x1e, 0xf8, 0x21, 0x23, 0x81, 0xea, 0xfd, 0x38, 0x9d, 0x7e, 0x32, 0xa7, 0x84,
	0xb3, 0x09, 0x8e, 0x10, 0x0f, 0xd2, 0xe5, 0xaf, 0x44, 0x4e, 0x13, 0x24, 0x06, 0x45, 0xf5, 0x39,
	0x3f, 0xf9, 0x1d, 0x00, 0x00, 0xff, 0xff, 0xa8, 0xa7, 0x59, 0xff, 0x69, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	EscrowInitial(ctx context.Context, in *MsgEscrowInitial, opts ...grpc.CallOption) (*MsgEscrowInitialResponse, error)
	CancelEscrow(ctx context.Context, in *MsgCancelEscrow, opts ...grpc.CallOption) (*MsgCancelEscrowResponse, error)
	// Mark an escrow as CLAIMED by its escrow_id
	MarkEscrowClaimed(ctx context.Context, in *MsgMarkEscrowClaimed, opts ...grpc.CallOption) (*MsgMarkEscrowClaimedResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) EscrowInitial(ctx context.Context, in *MsgEscrowInitial, opts ...grpc.CallOption) (*MsgEscrowInitialResponse, error) {
	out := new(MsgEscrowInitialResponse)
	err := c.cc.Invoke(ctx, "/maany.mintburn.v1.Msg/EscrowInitial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CancelEscrow(ctx context.Context, in *MsgCancelEscrow, opts ...grpc.CallOption) (*MsgCancelEscrowResponse, error) {
	out := new(MsgCancelEscrowResponse)
	err := c.cc.Invoke(ctx, "/maany.mintburn.v1.Msg/CancelEscrow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MarkEscrowClaimed(ctx context.Context, in *MsgMarkEscrowClaimed, opts ...grpc.CallOption) (*MsgMarkEscrowClaimedResponse, error) {
	out := new(MsgMarkEscrowClaimedResponse)
	err := c.cc.Invoke(ctx, "/maany.mintburn.v1.Msg/MarkEscrowClaimed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	EscrowInitial(context.Context, *MsgEscrowInitial) (*MsgEscrowInitialResponse, error)
	CancelEscrow(context.Context, *MsgCancelEscrow) (*MsgCancelEscrowResponse, error)
	// Mark an escrow as CLAIMED by its escrow_id
	MarkEscrowClaimed(context.Context, *MsgMarkEscrowClaimed) (*MsgMarkEscrowClaimedResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) EscrowInitial(ctx context.Context, req *MsgEscrowInitial) (*MsgEscrowInitialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EscrowInitial not implemented")
}
func (*UnimplementedMsgServer) CancelEscrow(ctx context.Context, req *MsgCancelEscrow) (*MsgCancelEscrowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelEscrow not implemented")
}
func (*UnimplementedMsgServer) MarkEscrowClaimed(ctx context.Context, req *MsgMarkEscrowClaimed) (*MsgMarkEscrowClaimedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkEscrowClaimed not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_EscrowInitial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgEscrowInitial)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).EscrowInitial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maany.mintburn.v1.Msg/EscrowInitial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).EscrowInitial(ctx, req.(*MsgEscrowInitial))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CancelEscrow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCancelEscrow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CancelEscrow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maany.mintburn.v1.Msg/CancelEscrow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CancelEscrow(ctx, req.(*MsgCancelEscrow))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MarkEscrowClaimed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMarkEscrowClaimed)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MarkEscrowClaimed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maany.mintburn.v1.Msg/MarkEscrowClaimed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MarkEscrowClaimed(ctx, req.(*MsgMarkEscrowClaimed))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "maany.mintburn.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EscrowInitial",
			Handler:    _Msg_EscrowInitial_Handler,
		},
		{
			MethodName: "CancelEscrow",
			Handler:    _Msg_CancelEscrow_Handler,
		},
		{
			MethodName: "MarkEscrowClaimed",
			Handler:    _Msg_MarkEscrowClaimed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "maany/mintburn/v1/tx.proto",
}

func (m *MsgEscrowInitial) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgEscrowInitial) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEscrowInitial) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExpiryTimeUnix != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ExpiryTimeUnix))
		i--
		dAtA[i] = 0x30
	}
	if m.ExpiryHeight != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ExpiryHeight))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0x22
	}
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.ConsumerChainId) > 0 {
		i -= len(m.ConsumerChainId)
		copy(dAtA[i:], m.ConsumerChainId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ConsumerChainId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgEscrowInitialResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgEscrowInitialResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEscrowInitialResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCancelEscrow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelEscrow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelEscrow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ConsumerChainId) > 0 {
		i -= len(m.ConsumerChainId)
		copy(dAtA[i:], m.ConsumerChainId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ConsumerChainId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancelEscrowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelEscrowResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelEscrowResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgMarkEscrowClaimed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMarkEscrowClaimed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMarkEscrowClaimed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EscrowId) > 0 {
		i -= len(m.EscrowId)
		copy(dAtA[i:], m.EscrowId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EscrowId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMarkEscrowClaimedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMarkEscrowClaimedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMarkEscrowClaimedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgEscrowInitial) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ConsumerChainId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ExpiryHeight != 0 {
		n += 1 + sovTx(uint64(m.ExpiryHeight))
	}
	if m.ExpiryTimeUnix != 0 {
		n += 1 + sovTx(uint64(m.ExpiryTimeUnix))
	}
	return n
}

func (m *MsgEscrowInitialResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCancelEscrow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ConsumerChainId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCancelEscrowResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgMarkEscrowClaimed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.EscrowId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgMarkEscrowClaimedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgEscrowInitial) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgEscrowInitial: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgEscrowInitial: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumerChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsumerChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiryHeight", wireType)
			}
			m.ExpiryHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiryHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiryTimeUnix", wireType)
			}
			m.ExpiryTimeUnix = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiryTimeUnix |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgEscrowInitialResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgEscrowInitialResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgEscrowInitialResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelEscrow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelEscrow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelEscrow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumerChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsumerChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelEscrowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelEscrowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelEscrowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMarkEscrowClaimed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMarkEscrowClaimed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMarkEscrowClaimed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EscrowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMarkEscrowClaimedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMarkEscrowClaimedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMarkEscrowClaimedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: maany/mintburn/v1/escrow.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EscrowStatus int32

const (
	EscrowStatus_ESCROW_STATUS_UNSPECIFIED EscrowStatus = 0
	EscrowStatus_ESCROW_STATUS_PENDING     EscrowStatus = 1
	EscrowStatus_ESCROW_STATUS_CLAIMED     EscrowStatus = 2
	EscrowStatus_ESCROW_STATUS_CANCELED    EscrowStatus = 3
)

var EscrowStatus_name = map[int32]string{
	0: "ESCROW_STATUS_UNSPECIFIED",
	1: "ESCROW_STATUS_PENDING",
	2: "ESCROW_STATUS_CLAIMED",
	3: "ESCROW_STATUS_CANCELED",
}

var EscrowStatus_value = map[string]int32{
	"ESCROW_STATUS_UNSPECIFIED": 0,
	"ESCROW_STATUS_PENDING":     1,
	"ESCROW_STATUS_CLAIMED":     2,
	"ESCROW_STATUS_CANCELED":    3,
}

func (x EscrowStatus) String() string {
	return proto.EnumName(EscrowStatus_name, int32(x))
}

func (EscrowStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8e3d9a9d19fde3d0, []int{0}
}

type Escrow struct {
	ConsumerChainId string       `protobuf:"bytes,1,opt,name=consumer_chain_id,json=consumerChainId,proto3" json:"consumer_chain_id,omitempty"`
	Amount          types.Coin   `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount"`
	Recipient       string       `protobuf:"bytes,3,opt,name=recipient,proto3" json:"recipient,omitempty"`
	ExpiryHeight    uint64       `protobuf:"varint,4,opt,name=expiry_height,json=expiryHeight,proto3" json:"expiry_height,omitempty"`
	ExpiryTimeUnix  uint64       `protobuf:"varint,5,opt,name=expiry_time_unix,json=expiryTimeUnix,proto3" json:"expiry_time_unix,omitempty"`
	Status          EscrowStatus `protobuf:"varint,6,opt,name=status,proto3,enum=maany.mintburn.v1.EscrowStatus" json:"status,omitempty"`
}

func (m *Escrow) Reset()         { *m = Escrow{} }
func (m *Escrow) String() string { return proto.CompactTextString(m) }
func (*Escrow) ProtoMessage()    {}
func (*Escrow) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e3d9a9d19fde3d0, []int{0}
}
func (m *Escrow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Escrow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Escrow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Escrow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Escrow.Merge(m, src)
}
func (m *Escrow) XXX_Size() int {
	return m.Size()
}
func (m *Escrow) XXX_DiscardUnknown() {
	xxx_messageInfo_Escrow.DiscardUnknown(m)
}

var xxx_messageInfo_Escrow proto.InternalMessageInfo

func (m *Escrow) GetConsumerChainId() string {
	if m != nil {
		return m.ConsumerChainId
	}
	return ""
}

func (m *Escrow) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

func (m *Escrow) GetRecipient() string {
	if m != nil {
		return m.Recipient
	}
	return ""
}

func (m *Escrow) GetExpiryHeight() uint64 {
	if m != nil {
		return m.ExpiryHeight
	}
	return 0
}

func (m *Escrow) GetExpiryTimeUnix() uint64 {
	if m != nil {
		return m.ExpiryTimeUnix
	}
	return 0
}

func (m *Escrow) GetStatus() EscrowStatus {
	if m != nil {
		return m.Status
	}
	return EscrowStatus_ESCROW_STATUS_UNSPECIFIED
}

func init() {
	proto.RegisterEnum("maany.mintburn.v1.EscrowStatus", EscrowStatus_name, EscrowStatus_value)
	proto.RegisterType((*Escrow)(nil), "maany.mintburn.v1.Escrow")
}

func init() { proto.RegisterFile("maany/mintburn/v1/escrow.proto", fileDescriptor_8e3d9a9d19fde3d0) }

var fileDescriptor_8e3d9a9d19fde3d0 = []byte{
	// 432 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x92, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0xc7, 0xe3, 0xae, 0x54, 0x9a, 0x19, 0x23, 0xb3, 0x00, 0xa5, 0x15, 0x64, 0x15, 0x5c, 0xa2,
	0x49, 0xd8, 0xea, 0x40, 0xe2, 0xdc, 0xa5, 0x01, 0x22, 0x8d, 0x30, 0x25, 0xad, 0x90, 0xb8, 0x44,
	0x49, 0x6a, 0xb5, 0x3e, 0xc4, 0x8e, 0x62, 0xa7, 0xa4, 0x5c, 0xf8, 0x0a, 0x48, 0x7c, 0xa9, 0x1d,
	0x77, 0xe4, 0x84, 0x50, 0xfb, 0x45, 0x50, 0x9d, 0x4c, 0x03, 0x7a, 0x7b, 0xfa, 0xfd, 0xfe, 0x79,
	0x2f, 0xcf, 0x36, 0xb4, 0xf3, 0x24, 0xe1, 0x6b, 0x92, 0x33, 0xae, 0xd2, 0xaa, 0xe4, 0x64, 0x35,
	0x22, 0x54, 0x66, 0xa5, 0xf8, 0x82, 0x8b, 0x52, 0x28, 0x81, 0x4e, 0xb4, 0xc7, 0xb7, 0x1e, 0xaf,
	0x46, 0x03, 0x3b, 0x13, 0x32, 0x17, 0x92, 0xa4, 0x89, 0xa4, 0x64, 0x35, 0x4a, 0xa9, 0x4a, 0x46,
	0x24, 0x13, 0x8c, 0x37, 0x9f, 0x0c, 0x1e, 0x2d, 0xc4, 0x42, 0xe8, 0x92, 0xec, 0xaa, 0x86, 0x3e,
	0xff, 0xd1, 0x81, 0x3d, 0x4f, 0x77, 0x46, 0x67, 0xf0, 0x24, 0x13, 0x5c, 0x56, 0x39, 0x2d, 0xe3,
	0x6c, 0x99, 0x30, 0x1e, 0xb3, 0xb9, 0x05, 0x86, 0xc0, 0x39, 0x0c, 0x1f, 0xde, 0x0a, 0x77, 0xc7,
	0xfd, 0x39, 0x7a, 0x03, 0x7b, 0x49, 0x2e, 0x2a, 0xae, 0xac, 0xce, 0x10, 0x38, 0xf7, 0xcf, 0xfb,
	0xb8, 0x99, 0x8e, 0x77, 0xd3, 0x71, 0x3b, 0x1d, 0xbb, 0x82, 0xf1, 0x8b, 0xee, 0xf5, 0xaf, 0x53,
	0x23, 0x6c, 0xe3, 0xe8, 0x29, 0x3c, 0x2c, 0x69, 0xc6, 0x0a, 0x46, 0xb9, 0xb2, 0x0e, 0x74, 0xf3,
	0x3b, 0x80, 0x5e, 0xc0, 0x07, 0xb4, 0x2e, 0x58, 0xb9, 0x8e, 0x97, 0x94, 0x2d, 0x96, 0xca, 0xea,
	0x0e, 0x81, 0xd3, 0x0d, 0x8f, 0x1a, 0xf8, 0x5e, 0x33, 0xe4, 0x40, 0xb3, 0x0d, 0x29, 0x96, 0xd3,
	0xb8, 0xe2, 0xac, 0xb6, 0xee, 0xe9, 0xdc, 0x71, 0xc3, 0xa7, 0x2c, 0xa7, 0x33, 0xce, 0xea, 0xdd,
	0x5f, 0x4a, 0x95, 0xa8, 0x4a, 0x5a, 0xbd, 0x21, 0x70, 0x8e, 0xcf, 0x4f, 0xf1, 0xde, 0xb1, 0xe1,
	0x66, 0xf9, 0x48, 0xc7, 0xc2, 0x36, 0x7e, 0xf6, 0x0d, 0x1e, 0xfd, 0xcd, 0xd1, 0x33, 0xd8, 0xf7,
	0x22, 0x37, 0xfc, 0xf8, 0x29, 0x8e, 0xa6, 0xe3, 0xe9, 0x2c, 0x8a, 0x67, 0x41, 0x74, 0xe5, 0xb9,
	0xfe, 0x5b, 0xdf, 0x9b, 0x98, 0x06, 0xea, 0xc3, 0xc7, 0xff, 0xea, 0x2b, 0x2f, 0x98, 0xf8, 0xc1,
	0x3b, 0x13, 0xec, 0x2b, 0xf7, 0x72, 0xec, 0x7f, 0xf0, 0x26, 0x66, 0x07, 0x0d, 0xe0, 0x93, 0xff,
	0xd4, 0x38, 0x70, 0xbd, 0x4b, 0x6f, 0x62, 0x1e, 0x5c, 0x04, 0xd7, 0x1b, 0x1b, 0xdc, 0x6c, 0x6c,
	0xf0, 0x7b, 0x63, 0x83, 0xef, 0x5b, 0xdb, 0xb8, 0xd9, 0xda, 0xc6, 0xcf, 0xad, 0x6d, 0x7c, 0x7e,
	0xbd, 0x60, 0x6a, 0x59, 0xa5, 0x38, 0x13, 0x39, 0xd1, 0xdb, 0xbc, 0xac, 0xd7, 0x5f, 0xdb, 0xaa,
	0x28, 0xc5, 0x8a, 0xcd, 0x69, 0x49, 0xea, 0xbb, 0x97, 0xa3, 0xd6, 0x05, 0x95, 0x69, 0x4f, 0xdf,
	0xf6, 0xab, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xb4, 0x17, 0x1c, 0x60, 0x58, 0x02, 0x00, 0x00,
}

func (m *Escrow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Escrow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Escrow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintEscrow(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x30
	}
	if m.ExpiryTimeUnix != 0 {
		i = encodeVarintEscrow(dAtA, i, uint64(m.ExpiryTimeUnix))
		i--
		dAtA[i] = 0x28
	}
	if m.ExpiryHeight != 0 {
		i = encodeVarintEscrow(dAtA, i, uint64(m.ExpiryHeight))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEscrow(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.ConsumerChainId) > 0 {
		i -= len(m.ConsumerChainId)
		copy(dAtA[i:], m.ConsumerChainId)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.ConsumerChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEscrow(dAtA []byte, offset int, v uint64) int {
	offset -= sovEscrow(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Escrow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConsumerChainId)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovEscrow(uint64(l))
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	if m.ExpiryHeight != 0 {
		n += 1 + sovEscrow(uint64(m.ExpiryHeight))
	}
	if m.ExpiryTimeUnix != 0 {
		n += 1 + sovEscrow(uint64(m.ExpiryTimeUnix))
	}
	if m.Status != 0 {
		n += 1 + sovEscrow(uint64(m.Status))
	}
	return n
}

func sovEscrow(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEscrow(x uint64) (n int) {
	return sovEscrow(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Escrow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEscrow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Escrow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Escrow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumerChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsumerChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiryHeight", wireType)
			}
			m.ExpiryHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiryHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiryTimeUnix", wireType)
			}
			m.ExpiryTimeUnix = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiryTimeUnix |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= EscrowStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEscrow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEscrow(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEscrow
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEscrow
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEscrow
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEscrow
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEscrow        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEscrow          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEscrow = fmt.Errorf("proto: unexpected end of group")
)

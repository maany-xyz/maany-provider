// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: maany/mintburn/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryEscrowRequest struct {
	ConsumerChainId string `protobuf:"bytes,1,opt,name=consumer_chain_id,json=consumerChainId,proto3" json:"consumer_chain_id,omitempty"`
	Denom           string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryEscrowRequest) Reset()         { *m = QueryEscrowRequest{} }
func (m *QueryEscrowRequest) String() string { return proto.CompactTextString(m) }
func (*QueryEscrowRequest) ProtoMessage()    {}
func (*QueryEscrowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b50a42a3fb7c069a, []int{0}
}
func (m *QueryEscrowRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEscrowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEscrowRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEscrowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEscrowRequest.Merge(m, src)
}
func (m *QueryEscrowRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryEscrowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEscrowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEscrowRequest proto.InternalMessageInfo

func (m *QueryEscrowRequest) GetConsumerChainId() string {
	if m != nil {
		return m.ConsumerChainId
	}
	return ""
}

func (m *QueryEscrowRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type QueryEscrowResponse struct {
	Escrow *Escrow `protobuf:"bytes,1,opt,name=escrow,proto3" json:"escrow,omitempty"`
}

func (m *QueryEscrowResponse) Reset()         { *m = QueryEscrowResponse{} }
func (m *QueryEscrowResponse) String() string { return proto.CompactTextString(m) }
func (*QueryEscrowResponse) ProtoMessage()    {}
func (*QueryEscrowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b50a42a3fb7c069a, []int{1}
}
func (m *QueryEscrowResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEscrowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEscrowResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEscrowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEscrowResponse.Merge(m, src)
}
func (m *QueryEscrowResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryEscrowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEscrowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEscrowResponse proto.InternalMessageInfo

func (m *QueryEscrowResponse) GetEscrow() *Escrow {
	if m != nil {
		return m.Escrow
	}
	return nil
}

type QueryEscrowsRequest struct {
	StatusFilter string `protobuf:"bytes,1,opt,name=status_filter,json=statusFilter,proto3" json:"status_filter,omitempty"`
}

func (m *QueryEscrowsRequest) Reset()         { *m = QueryEscrowsRequest{} }
func (m *QueryEscrowsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryEscrowsRequest) ProtoMessage()    {}
func (*QueryEscrowsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b50a42a3fb7c069a, []int{2}
}
func (m *QueryEscrowsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEscrowsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEscrowsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEscrowsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEscrowsRequest.Merge(m, src)
}
func (m *QueryEscrowsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryEscrowsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEscrowsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEscrowsRequest proto.InternalMessageInfo

func (m *QueryEscrowsRequest) GetStatusFilter() string {
	if m != nil {
		return m.StatusFilter
	}
	return ""
}

type QueryEscrowsResponse struct {
	Escrows []*Escrow `protobuf:"bytes,1,rep,name=escrows,proto3" json:"escrows,omitempty"`
}

func (m *QueryEscrowsResponse) Reset()         { *m = QueryEscrowsResponse{} }
func (m *QueryEscrowsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryEscrowsResponse) ProtoMessage()    {}
func (*QueryEscrowsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b50a42a3fb7c069a, []int{3}
}
func (m *QueryEscrowsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEscrowsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEscrowsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEscrowsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEscrowsResponse.Merge(m, src)
}
func (m *QueryEscrowsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryEscrowsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEscrowsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEscrowsResponse proto.InternalMessageInfo

func (m *QueryEscrowsResponse) GetEscrows() []*Escrow {
	if m != nil {
		return m.Escrows
	}
	return nil
}

type QueryEscrowProofRequest struct {
	ConsumerChainId string `protobuf:"bytes,1,opt,name=consumer_chain_id,json=consumerChainId,proto3" json:"consumer_chain_id,omitempty"`
	Denom           string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	Height          uint64 `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *QueryEscrowProofRequest) Reset()         { *m = QueryEscrowProofRequest{} }
func (m *QueryEscrowProofRequest) String() string { return proto.CompactTextString(m) }
func (*QueryEscrowProofRequest) ProtoMessage()    {}
func (*QueryEscrowProofRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b50a42a3fb7c069a, []int{4}
}
func (m *QueryEscrowProofRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEscrowProofRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEscrowProofRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEscrowProofRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEscrowProofRequest.Merge(m, src)
}
func (m *QueryEscrowProofRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryEscrowProofRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEscrowProofRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEscrowProofRequest proto.InternalMessageInfo

func (m *QueryEscrowProofRequest) GetConsumerChainId() string {
	if m != nil {
		return m.ConsumerChainId
	}
	return ""
}

func (m *QueryEscrowProofRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *QueryEscrowProofRequest) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type QueryEscrowProofResponse struct {
	Height   uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	KeyPath  []byte `protobuf:"bytes,2,opt,name=key_path,json=keyPath,proto3" json:"key_path,omitempty"`
	Value    []byte `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	ProofOps []byte `protobuf:"bytes,4,opt,name=proof_ops,json=proofOps,proto3" json:"proof_ops,omitempty"`
	// Optional convenience: signed header & validator set for one-shot LC
	TendermintSignedHeader []byte `protobuf:"bytes,5,opt,name=tendermint_signed_header,json=tendermintSignedHeader,proto3" json:"tendermint_signed_header,omitempty"`
	TendermintValidatorSet []byte `protobuf:"bytes,6,opt,name=tendermint_validator_set,json=tendermintValidatorSet,proto3" json:"tendermint_validator_set,omitempty"`
}

func (m *QueryEscrowProofResponse) Reset()         { *m = QueryEscrowProofResponse{} }
func (m *QueryEscrowProofResponse) String() string { return proto.CompactTextString(m) }
func (*QueryEscrowProofResponse) ProtoMessage()    {}
func (*QueryEscrowProofResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b50a42a3fb7c069a, []int{5}
}
func (m *QueryEscrowProofResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEscrowProofResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEscrowProofResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEscrowProofResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEscrowProofResponse.Merge(m, src)
}
func (m *QueryEscrowProofResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryEscrowProofResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEscrowProofResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEscrowProofResponse proto.InternalMessageInfo

func (m *QueryEscrowProofResponse) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *QueryEscrowProofResponse) GetKeyPath() []byte {
	if m != nil {
		return m.KeyPath
	}
	return nil
}

func (m *QueryEscrowProofResponse) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *QueryEscrowProofResponse) GetProofOps() []byte {
	if m != nil {
		return m.ProofOps
	}
	return nil
}

func (m *QueryEscrowProofResponse) GetTendermintSignedHeader() []byte {
	if m != nil {
		return m.TendermintSignedHeader
	}
	return nil
}

func (m *QueryEscrowProofResponse) GetTendermintValidatorSet() []byte {
	if m != nil {
		return m.TendermintValidatorSet
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryEscrowRequest)(nil), "maany.mintburn.v1.QueryEscrowRequest")
	proto.RegisterType((*QueryEscrowResponse)(nil), "maany.mintburn.v1.QueryEscrowResponse")
	proto.RegisterType((*QueryEscrowsRequest)(nil), "maany.mintburn.v1.QueryEscrowsRequest")
	proto.RegisterType((*QueryEscrowsResponse)(nil), "maany.mintburn.v1.QueryEscrowsResponse")
	proto.RegisterType((*QueryEscrowProofRequest)(nil), "maany.mintburn.v1.QueryEscrowProofRequest")
	proto.RegisterType((*QueryEscrowProofResponse)(nil), "maany.mintburn.v1.QueryEscrowProofResponse")
}

func init() { proto.RegisterFile("maany/mintburn/v1/query.proto", fileDescriptor_b50a42a3fb7c069a) }

var fileDescriptor_b50a42a3fb7c069a = []byte{
	// 600 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xad, 0xdb, 0x26, 0x69, 0xb7, 0x41, 0xa8, 0x4b, 0x54, 0x5c, 0x53, 0xac, 0xc8, 0x08, 0xa8,
	0x8a, 0xb0, 0x95, 0x16, 0xa1, 0x0a, 0x04, 0x07, 0x2a, 0x50, 0x11, 0x12, 0x94, 0x54, 0xea, 0x81,
	0x8b, 0xb5, 0x89, 0xb7, 0xb6, 0xd5, 0x64, 0xd7, 0xdd, 0x5d, 0x87, 0x9a, 0xaa, 0x1c, 0xf8, 0x02,
	0x24, 0x0e, 0x7c, 0x04, 0x3f, 0xc2, 0x8d, 0x4a, 0x5c, 0x38, 0xa2, 0x84, 0x4f, 0xe0, 0x03, 0x90,
	0xd7, 0x6b, 0x25, 0x69, 0x48, 0xc2, 0x81, 0xdb, 0xee, 0xbc, 0x99, 0xf7, 0xde, 0xcc, 0x8e, 0x0d,
	0xae, 0xb7, 0x11, 0x22, 0x89, 0xd3, 0x0e, 0x89, 0x68, 0xc4, 0x8c, 0x38, 0x9d, 0x9a, 0x73, 0x1c,
	0x63, 0x96, 0xd8, 0x11, 0xa3, 0x82, 0xc2, 0x65, 0x09, 0xdb, 0x39, 0x6c, 0x77, 0x6a, 0xc6, 0x9a,
	0x4f, 0xa9, 0xdf, 0xc2, 0x0e, 0x8a, 0x42, 0x07, 0x11, 0x42, 0x05, 0x12, 0x21, 0x25, 0x3c, 0x2b,
	0x30, 0x2a, 0x3e, 0xf5, 0xa9, 0x3c, 0x3a, 0xe9, 0x49, 0x45, 0xcd, 0x51, 0x15, 0xcc, 0x9b, 0x8c,
	0xbe, 0xcd, 0x70, 0xeb, 0x00, 0xc0, 0xd7, 0xa9, 0xea, 0x53, 0x19, 0xac, 0xe3, 0xe3, 0x18, 0x73,
	0x01, 0x37, 0xc0, 0x72, 0x93, 0x12, 0x1e, 0xb7, 0x31, 0x73, 0x9b, 0x01, 0x0a, 0x89, 0x1b, 0x7a,
	0xba, 0x56, 0xd5, 0xd6, 0x17, 0xeb, 0x97, 0x73, 0x60, 0x27, 0x8d, 0x3f, 0xf7, 0x60, 0x05, 0x14,
	0x3c, 0x4c, 0x68, 0x5b, 0x9f, 0x95, 0x78, 0x76, 0xb1, 0x76, 0xc1, 0x95, 0x21, 0x5e, 0x1e, 0x51,
	0xc2, 0x31, 0xac, 0x81, 0x62, 0x26, 0x2f, 0xd9, 0x96, 0x36, 0x57, 0xed, 0x91, 0x36, 0x6d, 0x55,
	0xa2, 0x12, 0xad, 0x07, 0x43, 0x4c, 0x3c, 0xb7, 0x78, 0x03, 0x5c, 0xe2, 0x02, 0x89, 0x98, 0xbb,
	0x87, 0x61, 0x4b, 0x60, 0xa6, 0xec, 0x95, 0xb3, 0xe0, 0x33, 0x19, 0xb3, 0x5e, 0x80, 0xca, 0x70,
	0xad, 0xb2, 0xb1, 0x05, 0x4a, 0x19, 0x3b, 0xd7, 0xb5, 0xea, 0xdc, 0x64, 0x1f, 0x79, 0xa6, 0xc5,
	0xc1, 0xd5, 0x01, 0xb2, 0x3d, 0x46, 0xe9, 0xe1, 0x7f, 0x9b, 0x17, 0x5c, 0x01, 0xc5, 0x00, 0x87,
	0x7e, 0x20, 0xf4, 0xb9, 0xaa, 0xb6, 0x3e, 0x5f, 0x57, 0x37, 0xeb, 0xb7, 0x06, 0xf4, 0x51, 0x55,
	0xd5, 0x46, 0xbf, 0x48, 0x1b, 0x2c, 0x82, 0xab, 0x60, 0xe1, 0x08, 0x27, 0x6e, 0x84, 0x44, 0x20,
	0x55, 0xca, 0xf5, 0xd2, 0x11, 0x4e, 0xf6, 0x90, 0x08, 0x52, 0xf5, 0x0e, 0x6a, 0xc5, 0x58, 0xca,
	0x94, 0xeb, 0xd9, 0x05, 0x5e, 0x03, 0x8b, 0x51, 0xca, 0xec, 0xd2, 0x88, 0xeb, 0xf3, 0x12, 0x59,
	0x90, 0x81, 0x57, 0x11, 0x87, 0xdb, 0x40, 0x17, 0x98, 0x78, 0x98, 0xa5, 0xc3, 0x71, 0x79, 0xe8,
	0x13, 0xec, 0xb9, 0x01, 0x46, 0x1e, 0x66, 0x7a, 0x41, 0xe6, 0xae, 0xf4, 0xf1, 0x7d, 0x09, 0xef,
	0x4a, 0xf4, 0x42, 0x65, 0x07, 0xb5, 0x42, 0x0f, 0x09, 0xca, 0x5c, 0x8e, 0x85, 0x5e, 0xbc, 0x58,
	0x79, 0x90, 0xc3, 0xfb, 0x58, 0x6c, 0x7e, 0x9b, 0x03, 0x05, 0xd9, 0x36, 0xfc, 0xac, 0x81, 0x62,
	0xd6, 0x3b, 0xbc, 0xf9, 0x97, 0x47, 0x1a, 0x5d, 0x5e, 0xe3, 0xd6, 0xb4, 0xb4, 0x6c, 0x7a, 0xd6,
	0xe3, 0x0f, 0xdf, 0x7f, 0x7d, 0x9a, 0xdd, 0x86, 0xf7, 0x9d, 0x71, 0xdf, 0x08, 0x77, 0x4e, 0x47,
	0x9e, 0xf5, 0xcc, 0x39, 0x95, 0x2f, 0x76, 0x06, 0xdf, 0x83, 0x92, 0xda, 0x2b, 0x38, 0x45, 0x32,
	0x5f, 0x5a, 0xe3, 0xf6, 0xd4, 0x3c, 0xe5, 0xcd, 0x92, 0xde, 0xd6, 0xa0, 0x31, 0xde, 0x1b, 0xfc,
	0xa2, 0x81, 0xa5, 0x81, 0xad, 0x80, 0x1b, 0x93, 0xc9, 0x07, 0x17, 0xd6, 0xb8, 0xf3, 0x4f, 0xb9,
	0xca, 0xcc, 0x8e, 0x34, 0xf3, 0x08, 0x3e, 0x1c, 0x6b, 0xc6, 0x95, 0xcb, 0x32, 0x69, 0x5a, 0x4f,
	0x5e, 0x7e, 0xed, 0x9a, 0xda, 0x79, 0xd7, 0xd4, 0x7e, 0x76, 0x4d, 0xed, 0x63, 0xcf, 0x9c, 0x39,
	0xef, 0x99, 0x33, 0x3f, 0x7a, 0xe6, 0xcc, 0x9b, 0x7b, 0x7e, 0x28, 0x82, 0xb8, 0x61, 0x37, 0x69,
	0x3b, 0x13, 0xb8, 0x7b, 0x92, 0xbc, 0x53, 0xa7, 0x88, 0xd1, 0x4e, 0xe8, 0x61, 0xe6, 0x9c, 0xf4,
	0x55, 0x45, 0x12, 0x61, 0xde, 0x28, 0xca, 0xff, 0xd7, 0xd6, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xa2, 0x27, 0x60, 0x22, 0x47, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	Escrow(ctx context.Context, in *QueryEscrowRequest, opts ...grpc.CallOption) (*QueryEscrowResponse, error)
	Escrows(ctx context.Context, in *QueryEscrowsRequest, opts ...grpc.CallOption) (*QueryEscrowsResponse, error)
	// Helper to export ICS-23 proof bundle (height provided by caller)
	EscrowProof(ctx context.Context, in *QueryEscrowProofRequest, opts ...grpc.CallOption) (*QueryEscrowProofResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Escrow(ctx context.Context, in *QueryEscrowRequest, opts ...grpc.CallOption) (*QueryEscrowResponse, error) {
	out := new(QueryEscrowResponse)
	err := c.cc.Invoke(ctx, "/maany.mintburn.v1.Query/Escrow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Escrows(ctx context.Context, in *QueryEscrowsRequest, opts ...grpc.CallOption) (*QueryEscrowsResponse, error) {
	out := new(QueryEscrowsResponse)
	err := c.cc.Invoke(ctx, "/maany.mintburn.v1.Query/Escrows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EscrowProof(ctx context.Context, in *QueryEscrowProofRequest, opts ...grpc.CallOption) (*QueryEscrowProofResponse, error) {
	out := new(QueryEscrowProofResponse)
	err := c.cc.Invoke(ctx, "/maany.mintburn.v1.Query/EscrowProof", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	Escrow(context.Context, *QueryEscrowRequest) (*QueryEscrowResponse, error)
	Escrows(context.Context, *QueryEscrowsRequest) (*QueryEscrowsResponse, error)
	// Helper to export ICS-23 proof bundle (height provided by caller)
	EscrowProof(context.Context, *QueryEscrowProofRequest) (*QueryEscrowProofResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Escrow(ctx context.Context, req *QueryEscrowRequest) (*QueryEscrowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Escrow not implemented")
}
func (*UnimplementedQueryServer) Escrows(ctx context.Context, req *QueryEscrowsRequest) (*QueryEscrowsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Escrows not implemented")
}
func (*UnimplementedQueryServer) EscrowProof(ctx context.Context, req *QueryEscrowProofRequest) (*QueryEscrowProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EscrowProof not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Escrow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEscrowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Escrow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maany.mintburn.v1.Query/Escrow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Escrow(ctx, req.(*QueryEscrowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Escrows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEscrowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Escrows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maany.mintburn.v1.Query/Escrows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Escrows(ctx, req.(*QueryEscrowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EscrowProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEscrowProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EscrowProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maany.mintburn.v1.Query/EscrowProof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EscrowProof(ctx, req.(*QueryEscrowProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "maany.mintburn.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Escrow",
			Handler:    _Query_Escrow_Handler,
		},
		{
			MethodName: "Escrows",
			Handler:    _Query_Escrows_Handler,
		},
		{
			MethodName: "EscrowProof",
			Handler:    _Query_EscrowProof_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "maany/mintburn/v1/query.proto",
}

func (m *QueryEscrowRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEscrowRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEscrowRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ConsumerChainId) > 0 {
		i -= len(m.ConsumerChainId)
		copy(dAtA[i:], m.ConsumerChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ConsumerChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryEscrowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEscrowResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEscrowResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Escrow != nil {
		{
			size, err := m.Escrow.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryEscrowsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEscrowsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEscrowsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StatusFilter) > 0 {
		i -= len(m.StatusFilter)
		copy(dAtA[i:], m.StatusFilter)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StatusFilter)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryEscrowsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEscrowsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEscrowsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Escrows) > 0 {
		for iNdEx := len(m.Escrows) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Escrows[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryEscrowProofRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEscrowProofRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEscrowProofRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ConsumerChainId) > 0 {
		i -= len(m.ConsumerChainId)
		copy(dAtA[i:], m.ConsumerChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ConsumerChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryEscrowProofResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEscrowProofResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEscrowProofResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TendermintValidatorSet) > 0 {
		i -= len(m.TendermintValidatorSet)
		copy(dAtA[i:], m.TendermintValidatorSet)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TendermintValidatorSet)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.TendermintSignedHeader) > 0 {
		i -= len(m.TendermintSignedHeader)
		copy(dAtA[i:], m.TendermintSignedHeader)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TendermintSignedHeader)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ProofOps) > 0 {
		i -= len(m.ProofOps)
		copy(dAtA[i:], m.ProofOps)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ProofOps)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.KeyPath) > 0 {
		i -= len(m.KeyPath)
		copy(dAtA[i:], m.KeyPath)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.KeyPath)))
		i--
		dAtA[i] = 0x12
	}
	if m.Height != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryEscrowRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConsumerChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryEscrowResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Escrow != nil {
		l = m.Escrow.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryEscrowsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StatusFilter)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryEscrowsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Escrows) > 0 {
		for _, e := range m.Escrows {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryEscrowProofRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConsumerChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovQuery(uint64(m.Height))
	}
	return n
}

func (m *QueryEscrowProofResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovQuery(uint64(m.Height))
	}
	l = len(m.KeyPath)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ProofOps)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TendermintSignedHeader)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TendermintValidatorSet)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryEscrowRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEscrowRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEscrowRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumerChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsumerChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEscrowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEscrowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEscrowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Escrow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Escrow == nil {
				m.Escrow = &Escrow{}
			}
			if err := m.Escrow.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEscrowsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEscrowsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEscrowsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusFilter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusFilter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEscrowsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEscrowsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEscrowsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Escrows", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Escrows = append(m.Escrows, &Escrow{})
			if err := m.Escrows[len(m.Escrows)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEscrowProofRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEscrowProofRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEscrowProofRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumerChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsumerChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEscrowProofResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEscrowProofResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEscrowProofResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyPath", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyPath = append(m.KeyPath[:0], dAtA[iNdEx:postIndex]...)
			if m.KeyPath == nil {
				m.KeyPath = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofOps", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofOps = append(m.ProofOps[:0], dAtA[iNdEx:postIndex]...)
			if m.ProofOps == nil {
				m.ProofOps = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TendermintSignedHeader", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TendermintSignedHeader = append(m.TendermintSignedHeader[:0], dAtA[iNdEx:postIndex]...)
			if m.TendermintSignedHeader == nil {
				m.TendermintSignedHeader = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TendermintValidatorSet", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TendermintValidatorSet = append(m.TendermintValidatorSet[:0], dAtA[iNdEx:postIndex]...)
			if m.TendermintValidatorSet == nil {
				m.TendermintValidatorSet = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)

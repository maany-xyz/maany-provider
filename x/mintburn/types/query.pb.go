// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: maany/mintburn/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	types "github.com/cosmos/ibc-go/v8/modules/core/23-commitment/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryEscrowRequest struct {
	ConsumerChainId string `protobuf:"bytes,1,opt,name=consumer_chain_id,json=consumerChainId,proto3" json:"consumer_chain_id,omitempty"`
	Denom           string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryEscrowRequest) Reset()         { *m = QueryEscrowRequest{} }
func (m *QueryEscrowRequest) String() string { return proto.CompactTextString(m) }
func (*QueryEscrowRequest) ProtoMessage()    {}
func (*QueryEscrowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b50a42a3fb7c069a, []int{0}
}
func (m *QueryEscrowRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEscrowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEscrowRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEscrowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEscrowRequest.Merge(m, src)
}
func (m *QueryEscrowRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryEscrowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEscrowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEscrowRequest proto.InternalMessageInfo

func (m *QueryEscrowRequest) GetConsumerChainId() string {
	if m != nil {
		return m.ConsumerChainId
	}
	return ""
}

func (m *QueryEscrowRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type QueryEscrowResponse struct {
	Escrow *Escrow `protobuf:"bytes,1,opt,name=escrow,proto3" json:"escrow,omitempty"`
}

func (m *QueryEscrowResponse) Reset()         { *m = QueryEscrowResponse{} }
func (m *QueryEscrowResponse) String() string { return proto.CompactTextString(m) }
func (*QueryEscrowResponse) ProtoMessage()    {}
func (*QueryEscrowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b50a42a3fb7c069a, []int{1}
}
func (m *QueryEscrowResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEscrowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEscrowResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEscrowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEscrowResponse.Merge(m, src)
}
func (m *QueryEscrowResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryEscrowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEscrowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEscrowResponse proto.InternalMessageInfo

func (m *QueryEscrowResponse) GetEscrow() *Escrow {
	if m != nil {
		return m.Escrow
	}
	return nil
}

type QueryEscrowsRequest struct {
	StatusFilter string `protobuf:"bytes,1,opt,name=status_filter,json=statusFilter,proto3" json:"status_filter,omitempty"`
}

func (m *QueryEscrowsRequest) Reset()         { *m = QueryEscrowsRequest{} }
func (m *QueryEscrowsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryEscrowsRequest) ProtoMessage()    {}
func (*QueryEscrowsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b50a42a3fb7c069a, []int{2}
}
func (m *QueryEscrowsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEscrowsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEscrowsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEscrowsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEscrowsRequest.Merge(m, src)
}
func (m *QueryEscrowsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryEscrowsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEscrowsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEscrowsRequest proto.InternalMessageInfo

func (m *QueryEscrowsRequest) GetStatusFilter() string {
	if m != nil {
		return m.StatusFilter
	}
	return ""
}

type QueryEscrowsResponse struct {
	Escrows []*Escrow `protobuf:"bytes,1,rep,name=escrows,proto3" json:"escrows,omitempty"`
}

func (m *QueryEscrowsResponse) Reset()         { *m = QueryEscrowsResponse{} }
func (m *QueryEscrowsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryEscrowsResponse) ProtoMessage()    {}
func (*QueryEscrowsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b50a42a3fb7c069a, []int{3}
}
func (m *QueryEscrowsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEscrowsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEscrowsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEscrowsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEscrowsResponse.Merge(m, src)
}
func (m *QueryEscrowsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryEscrowsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEscrowsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEscrowsResponse proto.InternalMessageInfo

func (m *QueryEscrowsResponse) GetEscrows() []*Escrow {
	if m != nil {
		return m.Escrows
	}
	return nil
}

// Caller chooses a provider block height that is <= the consumer's trusted client height.
type QueryEscrowProofRequest struct {
	ConsumerChainId string `protobuf:"bytes,1,opt,name=consumer_chain_id,json=consumerChainId,proto3" json:"consumer_chain_id,omitempty"`
	Denom           string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	Height          uint64 `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *QueryEscrowProofRequest) Reset()         { *m = QueryEscrowProofRequest{} }
func (m *QueryEscrowProofRequest) String() string { return proto.CompactTextString(m) }
func (*QueryEscrowProofRequest) ProtoMessage()    {}
func (*QueryEscrowProofRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b50a42a3fb7c069a, []int{4}
}
func (m *QueryEscrowProofRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEscrowProofRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEscrowProofRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEscrowProofRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEscrowProofRequest.Merge(m, src)
}
func (m *QueryEscrowProofRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryEscrowProofRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEscrowProofRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEscrowProofRequest proto.InternalMessageInfo

func (m *QueryEscrowProofRequest) GetConsumerChainId() string {
	if m != nil {
		return m.ConsumerChainId
	}
	return ""
}

func (m *QueryEscrowProofRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *QueryEscrowProofRequest) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

// This shape matches what a consumer module wants for ibc-go VerifyMembership():
type QueryEscrowProofResponse struct {
	// The height used to produce the commitment proof.
	Height uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	// The exact committed VALUE bytes under the escrow key (proto-encoded Escrow).
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// The Merkle proof (ibc-go commitment MerkleProof, not raw Tendermint proof ops).
	MerkleProof *types.MerkleProof `protobuf:"bytes,3,opt,name=merkle_proof,json=merkleProof,proto3" json:"merkle_proof,omitempty"`
	// Full MerklePath segments expected by VerifyMembership (multi-store → sub-store → key).
	// Ex: ["mintburn", "<hex-escrow-key>"] if you verify against the substore root,
	// or include multistore segment(s) depending on your commitment scheme.
	KeyPath []string `protobuf:"bytes,4,rep,name=key_path,json=keyPath,proto3" json:"key_path,omitempty"`
	// Convenience echoes (not used in verification; helpful for UIs/tools):
	EscrowId    string `protobuf:"bytes,5,opt,name=escrow_id,json=escrowId,proto3" json:"escrow_id,omitempty"`
	AmountDenom string `protobuf:"bytes,6,opt,name=amount_denom,json=amountDenom,proto3" json:"amount_denom,omitempty"`
	AmountValue string `protobuf:"bytes,7,opt,name=amount_value,json=amountValue,proto3" json:"amount_value,omitempty"`
}

func (m *QueryEscrowProofResponse) Reset()         { *m = QueryEscrowProofResponse{} }
func (m *QueryEscrowProofResponse) String() string { return proto.CompactTextString(m) }
func (*QueryEscrowProofResponse) ProtoMessage()    {}
func (*QueryEscrowProofResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b50a42a3fb7c069a, []int{5}
}
func (m *QueryEscrowProofResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEscrowProofResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEscrowProofResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEscrowProofResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEscrowProofResponse.Merge(m, src)
}
func (m *QueryEscrowProofResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryEscrowProofResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEscrowProofResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEscrowProofResponse proto.InternalMessageInfo

func (m *QueryEscrowProofResponse) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *QueryEscrowProofResponse) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *QueryEscrowProofResponse) GetMerkleProof() *types.MerkleProof {
	if m != nil {
		return m.MerkleProof
	}
	return nil
}

func (m *QueryEscrowProofResponse) GetKeyPath() []string {
	if m != nil {
		return m.KeyPath
	}
	return nil
}

func (m *QueryEscrowProofResponse) GetEscrowId() string {
	if m != nil {
		return m.EscrowId
	}
	return ""
}

func (m *QueryEscrowProofResponse) GetAmountDenom() string {
	if m != nil {
		return m.AmountDenom
	}
	return ""
}

func (m *QueryEscrowProofResponse) GetAmountValue() string {
	if m != nil {
		return m.AmountValue
	}
	return ""
}

// Authorized ICA mapping query
type QueryAuthorizedICARequest struct {
	ConsumerChainId string `protobuf:"bytes,1,opt,name=consumer_chain_id,json=consumerChainId,proto3" json:"consumer_chain_id,omitempty"`
}

func (m *QueryAuthorizedICARequest) Reset()         { *m = QueryAuthorizedICARequest{} }
func (m *QueryAuthorizedICARequest) String() string { return proto.CompactTextString(m) }
func (*QueryAuthorizedICARequest) ProtoMessage()    {}
func (*QueryAuthorizedICARequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b50a42a3fb7c069a, []int{6}
}
func (m *QueryAuthorizedICARequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAuthorizedICARequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAuthorizedICARequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAuthorizedICARequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAuthorizedICARequest.Merge(m, src)
}
func (m *QueryAuthorizedICARequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAuthorizedICARequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAuthorizedICARequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAuthorizedICARequest proto.InternalMessageInfo

func (m *QueryAuthorizedICARequest) GetConsumerChainId() string {
	if m != nil {
		return m.ConsumerChainId
	}
	return ""
}

type QueryAuthorizedICAResponse struct {
	IcaAddress string `protobuf:"bytes,1,opt,name=ica_address,json=icaAddress,proto3" json:"ica_address,omitempty"`
	Found      bool   `protobuf:"varint,2,opt,name=found,proto3" json:"found,omitempty"`
}

func (m *QueryAuthorizedICAResponse) Reset()         { *m = QueryAuthorizedICAResponse{} }
func (m *QueryAuthorizedICAResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAuthorizedICAResponse) ProtoMessage()    {}
func (*QueryAuthorizedICAResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b50a42a3fb7c069a, []int{7}
}
func (m *QueryAuthorizedICAResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAuthorizedICAResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAuthorizedICAResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAuthorizedICAResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAuthorizedICAResponse.Merge(m, src)
}
func (m *QueryAuthorizedICAResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAuthorizedICAResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAuthorizedICAResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAuthorizedICAResponse proto.InternalMessageInfo

func (m *QueryAuthorizedICAResponse) GetIcaAddress() string {
	if m != nil {
		return m.IcaAddress
	}
	return ""
}

func (m *QueryAuthorizedICAResponse) GetFound() bool {
	if m != nil {
		return m.Found
	}
	return false
}

func init() {
	proto.RegisterType((*QueryEscrowRequest)(nil), "maany.mintburn.v1.QueryEscrowRequest")
	proto.RegisterType((*QueryEscrowResponse)(nil), "maany.mintburn.v1.QueryEscrowResponse")
	proto.RegisterType((*QueryEscrowsRequest)(nil), "maany.mintburn.v1.QueryEscrowsRequest")
	proto.RegisterType((*QueryEscrowsResponse)(nil), "maany.mintburn.v1.QueryEscrowsResponse")
	proto.RegisterType((*QueryEscrowProofRequest)(nil), "maany.mintburn.v1.QueryEscrowProofRequest")
	proto.RegisterType((*QueryEscrowProofResponse)(nil), "maany.mintburn.v1.QueryEscrowProofResponse")
	proto.RegisterType((*QueryAuthorizedICARequest)(nil), "maany.mintburn.v1.QueryAuthorizedICARequest")
	proto.RegisterType((*QueryAuthorizedICAResponse)(nil), "maany.mintburn.v1.QueryAuthorizedICAResponse")
}

func init() { proto.RegisterFile("maany/mintburn/v1/query.proto", fileDescriptor_b50a42a3fb7c069a) }

var fileDescriptor_b50a42a3fb7c069a = []byte{
	// 732 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xcf, 0x4f, 0x13, 0x4d,
	0x18, 0x66, 0x81, 0xb6, 0x30, 0x2d, 0xf9, 0xc2, 0x7c, 0xe4, 0xfb, 0xca, 0x8a, 0x6b, 0x5d, 0xa2,
	0x10, 0x94, 0xdd, 0x14, 0xfc, 0x15, 0x13, 0x4d, 0x10, 0x44, 0x89, 0x3f, 0x82, 0x35, 0xe1, 0xe0,
	0x65, 0x33, 0xdd, 0x1d, 0xba, 0x13, 0xba, 0x3b, 0xcb, 0xce, 0x6c, 0xa5, 0x10, 0x3c, 0x78, 0xf0,
	0x68, 0x4c, 0x3c, 0xf8, 0x47, 0x78, 0xf5, 0x8f, 0xf0, 0x48, 0xe2, 0xc5, 0xa3, 0x01, 0xff, 0x10,
	0xb3, 0x33, 0x53, 0xdb, 0xa6, 0x2d, 0x10, 0xe3, 0x6d, 0xe6, 0x7d, 0x9f, 0xf7, 0x79, 0x9f, 0x79,
	0xf6, 0x7d, 0x5b, 0x70, 0x31, 0x40, 0x28, 0x6c, 0xda, 0x01, 0x09, 0x79, 0x35, 0x89, 0x43, 0xbb,
	0x51, 0xb6, 0x77, 0x13, 0x1c, 0x37, 0xad, 0x28, 0xa6, 0x9c, 0xc2, 0x49, 0x91, 0xb6, 0x5a, 0x69,
	0xab, 0x51, 0xd6, 0x67, 0x6a, 0x94, 0xd6, 0xea, 0xd8, 0x46, 0x11, 0xb1, 0x51, 0x18, 0x52, 0x8e,
	0x38, 0xa1, 0x21, 0x93, 0x05, 0xfa, 0x54, 0x8d, 0xd6, 0xa8, 0x38, 0xda, 0xe9, 0x49, 0x45, 0x8d,
	0xde, 0x2e, 0x98, 0xb9, 0x31, 0x7d, 0xad, 0xf2, 0x73, 0xa4, 0xea, 0xda, 0x2e, 0x8d, 0xb1, 0xed,
	0xd2, 0x20, 0x20, 0x3c, 0xc0, 0x21, 0x4f, 0x41, 0xed, 0x9b, 0x04, 0x9a, 0x5b, 0x00, 0xbe, 0x48,
	0xe5, 0x3d, 0x14, 0xd5, 0x15, 0xbc, 0x9b, 0x60, 0xc6, 0xe1, 0x02, 0x98, 0x74, 0x69, 0xc8, 0x92,
	0x00, 0xc7, 0x8e, 0xeb, 0x23, 0x12, 0x3a, 0xc4, 0x2b, 0x6a, 0x25, 0x6d, 0x7e, 0xbc, 0xf2, 0x4f,
	0x2b, 0xb1, 0x9a, 0xc6, 0x37, 0x3c, 0x38, 0x05, 0x32, 0x1e, 0x0e, 0x69, 0x50, 0x1c, 0x16, 0x79,
	0x79, 0x31, 0x1f, 0x83, 0x7f, 0xbb, 0x78, 0x59, 0x44, 0x43, 0x86, 0x61, 0x19, 0x64, 0xa5, 0x4e,
	0xc1, 0x96, 0x5f, 0x9a, 0xb6, 0x7a, 0xfc, 0xb0, 0x54, 0x89, 0x02, 0x9a, 0x77, 0xbb, 0x98, 0x58,
	0x4b, 0xe2, 0x2c, 0x98, 0x60, 0x1c, 0xf1, 0x84, 0x39, 0xdb, 0xa4, 0xce, 0x71, 0xac, 0xe4, 0x15,
	0x64, 0x70, 0x5d, 0xc4, 0xcc, 0x27, 0x60, 0xaa, 0xbb, 0x56, 0xc9, 0x58, 0x06, 0x39, 0xc9, 0xce,
	0x8a, 0x5a, 0x69, 0xe4, 0x74, 0x1d, 0x2d, 0xa4, 0xc9, 0xc0, 0xff, 0x1d, 0x64, 0x9b, 0x31, 0xa5,
	0xdb, 0x7f, 0xcd, 0x2f, 0xf8, 0x1f, 0xc8, 0xfa, 0x98, 0xd4, 0x7c, 0x5e, 0x1c, 0x29, 0x69, 0xf3,
	0xa3, 0x15, 0x75, 0x33, 0xdf, 0x0f, 0x83, 0x62, 0x6f, 0x57, 0xf5, 0x8c, 0x76, 0x91, 0xd6, 0x59,
	0x94, 0xb6, 0x68, 0xa0, 0x7a, 0x82, 0x45, 0x8b, 0x42, 0x45, 0x5e, 0xe0, 0x3a, 0x28, 0x04, 0x38,
	0xde, 0xa9, 0x63, 0x27, 0x4a, 0x59, 0x44, 0xa3, 0xfc, 0xd2, 0xac, 0x45, 0xaa, 0xae, 0x95, 0x8e,
	0x8a, 0xd5, 0x31, 0x1c, 0x8d, 0xb2, 0xf5, 0x4c, 0x60, 0x65, 0xc3, 0x7c, 0xd0, 0xbe, 0xc0, 0x69,
	0x30, 0xb6, 0x83, 0x9b, 0x4e, 0x84, 0xb8, 0x5f, 0x1c, 0x2d, 0x8d, 0xcc, 0x8f, 0x57, 0x72, 0x3b,
	0xb8, 0xb9, 0x89, 0xb8, 0x0f, 0x2f, 0x80, 0x71, 0xe9, 0x56, 0xfa, 0xfe, 0x8c, 0x78, 0xdf, 0x98,
	0x0c, 0x6c, 0x78, 0xf0, 0x32, 0x28, 0xa0, 0x80, 0x26, 0x21, 0x77, 0xe4, 0xfb, 0xb3, 0x22, 0x9f,
	0x97, 0xb1, 0x35, 0xe1, 0x42, 0x1b, 0x22, 0xf5, 0xe7, 0x3a, 0x21, 0x5b, 0x69, 0xc8, 0x7c, 0x04,
	0xa6, 0x85, 0x1f, 0x2b, 0x09, 0xf7, 0x69, 0x4c, 0xf6, 0xb1, 0xb7, 0xb1, 0xba, 0xf2, 0x07, 0xdf,
	0xc1, 0x7c, 0x09, 0xf4, 0x7e, 0x44, 0xca, 0xda, 0x4b, 0x20, 0x4f, 0x5c, 0xe4, 0x20, 0xcf, 0x8b,
	0x31, 0x63, 0x8a, 0x03, 0x10, 0x17, 0xad, 0xc8, 0x48, 0xea, 0xf1, 0x36, 0x4d, 0x42, 0x4f, 0x78,
	0x3c, 0x56, 0x91, 0x97, 0xa5, 0x77, 0x19, 0x90, 0x11, 0xac, 0xf0, 0x93, 0x06, 0xb2, 0xf2, 0x9b,
	0xc1, 0x2b, 0x7d, 0x86, 0xab, 0x77, 0xe9, 0xf4, 0xab, 0x67, 0xc1, 0xa4, 0x34, 0xf3, 0xfe, 0xdb,
	0x6f, 0x3f, 0x3f, 0x0e, 0xdf, 0x81, 0xb7, 0xec, 0x41, 0x3f, 0x02, 0xcc, 0x3e, 0xe8, 0xb1, 0xe1,
	0xd0, 0x3e, 0x10, 0xb6, 0x1f, 0xc2, 0x37, 0x20, 0xa7, 0xf6, 0x01, 0x9e, 0xd1, 0xb2, 0xb5, 0x6c,
	0xfa, 0xdc, 0x99, 0x38, 0xa5, 0xcd, 0x14, 0xda, 0x66, 0xa0, 0x3e, 0x58, 0x1b, 0xfc, 0xa2, 0x81,
	0x7c, 0xc7, 0x34, 0xc3, 0x85, 0xd3, 0xc9, 0x3b, 0x17, 0x4d, 0xbf, 0x76, 0x2e, 0xac, 0x12, 0xf3,
	0x54, 0x88, 0x59, 0x87, 0x6b, 0x03, 0xc5, 0xc8, 0x4d, 0x38, 0xcd, 0x2d, 0xfb, 0x40, 0xee, 0xd4,
	0x21, 0xfc, 0xac, 0x81, 0x89, 0xae, 0x59, 0x81, 0xd7, 0x07, 0x89, 0xe9, 0x37, 0x9b, 0xfa, 0xe2,
	0x39, 0xd1, 0x4a, 0xfc, 0x3d, 0x21, 0xfe, 0x36, 0xbc, 0xd9, 0x47, 0x3c, 0xfa, 0x5d, 0xe1, 0x10,
	0x17, 0xf5, 0x93, 0xff, 0xe0, 0xf9, 0xd7, 0x63, 0x43, 0x3b, 0x3a, 0x36, 0xb4, 0x1f, 0xc7, 0x86,
	0xf6, 0xe1, 0xc4, 0x18, 0x3a, 0x3a, 0x31, 0x86, 0xbe, 0x9f, 0x18, 0x43, 0xaf, 0x6e, 0xd4, 0x08,
	0xf7, 0x93, 0x6a, 0xba, 0xed, 0x92, 0x7a, 0x71, 0xaf, 0xb9, 0xaf, 0x4e, 0x51, 0x4c, 0x1b, 0xc4,
	0xc3, 0xb1, 0xbd, 0xd7, 0xee, 0xc7, 0x9b, 0x11, 0x66, 0xd5, 0xac, 0xf8, 0xbb, 0x58, 0xfe, 0x15,
	0x00, 0x00, 0xff, 0xff, 0x2f, 0x3a, 0x1d, 0xd1, 0xdf, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	Escrow(ctx context.Context, in *QueryEscrowRequest, opts ...grpc.CallOption) (*QueryEscrowResponse, error)
	Escrows(ctx context.Context, in *QueryEscrowsRequest, opts ...grpc.CallOption) (*QueryEscrowsResponse, error)
	// Export ICS-23 proof bundle for a specific escrow at a specific height
	EscrowProof(ctx context.Context, in *QueryEscrowProofRequest, opts ...grpc.CallOption) (*QueryEscrowProofResponse, error)
	// Return the authorized ICA address for a consumer chain, if any
	AuthorizedICA(ctx context.Context, in *QueryAuthorizedICARequest, opts ...grpc.CallOption) (*QueryAuthorizedICAResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Escrow(ctx context.Context, in *QueryEscrowRequest, opts ...grpc.CallOption) (*QueryEscrowResponse, error) {
	out := new(QueryEscrowResponse)
	err := c.cc.Invoke(ctx, "/maany.mintburn.v1.Query/Escrow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Escrows(ctx context.Context, in *QueryEscrowsRequest, opts ...grpc.CallOption) (*QueryEscrowsResponse, error) {
	out := new(QueryEscrowsResponse)
	err := c.cc.Invoke(ctx, "/maany.mintburn.v1.Query/Escrows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EscrowProof(ctx context.Context, in *QueryEscrowProofRequest, opts ...grpc.CallOption) (*QueryEscrowProofResponse, error) {
	out := new(QueryEscrowProofResponse)
	err := c.cc.Invoke(ctx, "/maany.mintburn.v1.Query/EscrowProof", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AuthorizedICA(ctx context.Context, in *QueryAuthorizedICARequest, opts ...grpc.CallOption) (*QueryAuthorizedICAResponse, error) {
	out := new(QueryAuthorizedICAResponse)
	err := c.cc.Invoke(ctx, "/maany.mintburn.v1.Query/AuthorizedICA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	Escrow(context.Context, *QueryEscrowRequest) (*QueryEscrowResponse, error)
	Escrows(context.Context, *QueryEscrowsRequest) (*QueryEscrowsResponse, error)
	// Export ICS-23 proof bundle for a specific escrow at a specific height
	EscrowProof(context.Context, *QueryEscrowProofRequest) (*QueryEscrowProofResponse, error)
	// Return the authorized ICA address for a consumer chain, if any
	AuthorizedICA(context.Context, *QueryAuthorizedICARequest) (*QueryAuthorizedICAResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Escrow(ctx context.Context, req *QueryEscrowRequest) (*QueryEscrowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Escrow not implemented")
}
func (*UnimplementedQueryServer) Escrows(ctx context.Context, req *QueryEscrowsRequest) (*QueryEscrowsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Escrows not implemented")
}
func (*UnimplementedQueryServer) EscrowProof(ctx context.Context, req *QueryEscrowProofRequest) (*QueryEscrowProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EscrowProof not implemented")
}
func (*UnimplementedQueryServer) AuthorizedICA(ctx context.Context, req *QueryAuthorizedICARequest) (*QueryAuthorizedICAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthorizedICA not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Escrow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEscrowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Escrow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maany.mintburn.v1.Query/Escrow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Escrow(ctx, req.(*QueryEscrowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Escrows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEscrowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Escrows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maany.mintburn.v1.Query/Escrows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Escrows(ctx, req.(*QueryEscrowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EscrowProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEscrowProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EscrowProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maany.mintburn.v1.Query/EscrowProof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EscrowProof(ctx, req.(*QueryEscrowProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AuthorizedICA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAuthorizedICARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AuthorizedICA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maany.mintburn.v1.Query/AuthorizedICA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AuthorizedICA(ctx, req.(*QueryAuthorizedICARequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "maany.mintburn.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Escrow",
			Handler:    _Query_Escrow_Handler,
		},
		{
			MethodName: "Escrows",
			Handler:    _Query_Escrows_Handler,
		},
		{
			MethodName: "EscrowProof",
			Handler:    _Query_EscrowProof_Handler,
		},
		{
			MethodName: "AuthorizedICA",
			Handler:    _Query_AuthorizedICA_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "maany/mintburn/v1/query.proto",
}

func (m *QueryEscrowRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEscrowRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEscrowRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ConsumerChainId) > 0 {
		i -= len(m.ConsumerChainId)
		copy(dAtA[i:], m.ConsumerChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ConsumerChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryEscrowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEscrowResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEscrowResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Escrow != nil {
		{
			size, err := m.Escrow.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryEscrowsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEscrowsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEscrowsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StatusFilter) > 0 {
		i -= len(m.StatusFilter)
		copy(dAtA[i:], m.StatusFilter)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StatusFilter)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryEscrowsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEscrowsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEscrowsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Escrows) > 0 {
		for iNdEx := len(m.Escrows) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Escrows[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryEscrowProofRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEscrowProofRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEscrowProofRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ConsumerChainId) > 0 {
		i -= len(m.ConsumerChainId)
		copy(dAtA[i:], m.ConsumerChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ConsumerChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryEscrowProofResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEscrowProofResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEscrowProofResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AmountValue) > 0 {
		i -= len(m.AmountValue)
		copy(dAtA[i:], m.AmountValue)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AmountValue)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.AmountDenom) > 0 {
		i -= len(m.AmountDenom)
		copy(dAtA[i:], m.AmountDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AmountDenom)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.EscrowId) > 0 {
		i -= len(m.EscrowId)
		copy(dAtA[i:], m.EscrowId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.EscrowId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.KeyPath) > 0 {
		for iNdEx := len(m.KeyPath) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.KeyPath[iNdEx])
			copy(dAtA[i:], m.KeyPath[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.KeyPath[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.MerkleProof != nil {
		{
			size, err := m.MerkleProof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if m.Height != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryAuthorizedICARequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAuthorizedICARequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAuthorizedICARequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConsumerChainId) > 0 {
		i -= len(m.ConsumerChainId)
		copy(dAtA[i:], m.ConsumerChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ConsumerChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAuthorizedICAResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAuthorizedICAResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAuthorizedICAResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Found {
		i--
		if m.Found {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.IcaAddress) > 0 {
		i -= len(m.IcaAddress)
		copy(dAtA[i:], m.IcaAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.IcaAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryEscrowRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConsumerChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryEscrowResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Escrow != nil {
		l = m.Escrow.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryEscrowsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StatusFilter)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryEscrowsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Escrows) > 0 {
		for _, e := range m.Escrows {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryEscrowProofRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConsumerChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovQuery(uint64(m.Height))
	}
	return n
}

func (m *QueryEscrowProofResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovQuery(uint64(m.Height))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.MerkleProof != nil {
		l = m.MerkleProof.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.KeyPath) > 0 {
		for _, s := range m.KeyPath {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	l = len(m.EscrowId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.AmountDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.AmountValue)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAuthorizedICARequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConsumerChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAuthorizedICAResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IcaAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Found {
		n += 2
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryEscrowRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEscrowRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEscrowRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumerChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsumerChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEscrowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEscrowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEscrowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Escrow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Escrow == nil {
				m.Escrow = &Escrow{}
			}
			if err := m.Escrow.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEscrowsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEscrowsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEscrowsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusFilter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusFilter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEscrowsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEscrowsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEscrowsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Escrows", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Escrows = append(m.Escrows, &Escrow{})
			if err := m.Escrows[len(m.Escrows)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEscrowProofRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEscrowProofRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEscrowProofRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumerChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsumerChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEscrowProofResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEscrowProofResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEscrowProofResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerkleProof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MerkleProof == nil {
				m.MerkleProof = &types.MerkleProof{}
			}
			if err := m.MerkleProof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyPath = append(m.KeyPath, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EscrowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AmountDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AmountValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAuthorizedICARequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAuthorizedICARequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAuthorizedICARequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumerChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsumerChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAuthorizedICAResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAuthorizedICAResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAuthorizedICAResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IcaAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IcaAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Found", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Found = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
